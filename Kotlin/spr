## 단일 책임 원칙 - SRP (Single Responsibility Principle)

단일 책임 원칙(SRP)은 객체는 단 하나의 책임만 가져야 한다는 원칙을 가진다.  
즉, 모든 클래스는 하나의 책임만 가지며, 클래스는 그 책임을 완전히 캡슐화해야 한다는 의미이다. 

객체가 담당하는 동작, 책임이 많아질 수록 해당 객체의 변경에 따른 영향도의 양과 범위가 매우 커진다. 단일 책임 원칙은 특정 객체의 책임 의존성 과중을 최대한 지양하기 위한 원칙이다. 

하나의 객체에 너무 많은 책임이 몰려 있을 경우, 프로젝트에서 해당 객체의 의존성이 높아지게 된다. 이렇게 되는 경우 객체 지향의 특징 중 하나인 캡슐화를 무시하게 되고, 각자의 코드가 서로 의존될 경우, 코드 수정에 따른 영향도 높아지고, 범위 또한 높아진다. 

단일 책임 원칙은 1객체 =1책임으로 최대한 객체를 간결하고 명확하게 설계할 것을 요구한다. 

예를 들어서, 객체인 '나'가 남자친구, 아들, 직장동료, 손자의 모든 역할을 한 번에 할 순 없다. 객체 '나'를 상위 객체에 적용될 수 있게끔 구현하고 역할마다 분리해야한다. 

> 객체인 '나'를 상위 객체에 적용될 수 있게끔 구현하고, 메소드는 역할에 따라 동작이 달라지므로 abstract 를 통해 추상 메소드로 선언한다. 해당 객체의 인스턴스를 생성하거나, 상속받는 객체가 직접 구현하게 될 것이다. 

>'남자친구, 아들, 직장동료, 손자' 의 객체를 생성한다. 이 세 객체는 모두 '나'에 포함되므로 '나'를 상속받아 구현하면 된다. 각 객체의 메소드에 동작을 구현함으로써, 각각의 객체가 하나의 책임을 가지게 된다. 

#### why 
01. 의존성이 낮아져 올바른 모듈화 가능
02. 코드가 간결해져 유지보수 쉬워짐 
03. 수정에 따른 영향도도 작아진다.
04. 가독성 향상 